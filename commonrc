# Common rc
# Things I want in all shells (specifically bash and zsh)

export LANG=en_US.UTF-8

#####################
# Paths and rules
#####################

# Base16 colors
# Credit: https://github.com/chriskempson/base16-shell
if [[ -f $HOME/.base16colors ]]; then
    source $HOME/.base16colors
fi

# Checks if a command / program exists
function command_exists() {
  command -v $1 >/dev/null 2>&1
}

# Try to look for CTK on linux devices
if [[ "$OSTYPE" == "linux-gnu"* ]] && command_exists nvidia-smi && ! command_exists nvcc; then
    CUDA_PATHS=( 
        "/usr/local/cuda-13.0"
        "/usr/local/cuda-12.9"
        "/usr/local/cuda-12.8"
        "/usr/local/cuda-12.7"
        "/usr/local/cuda-12.6"
        "/usr/local/cuda-12.5"
        "/usr/local/cuda-12.4"
        "/usr/local/cuda-12.3"
        "/usr/local/cuda-12.2"
        "/usr/local/cuda"
    )
    for cuda_path in ${CUDA_PATHS[*]}; do
        if [[ -d "${cuda_path}" ]] && [[ -f "${cuda_path}/bin/nvcc" ]] && [[ -d "${cuda_path}/lib64" ]]; then
            export PATH=${cuda_path}/bin${PATH:+:${PATH}}
            export LD_LIBRARY_PATH=${cuda_path}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
            break
        fi
    done
fi

# General Exports
export EDITOR="vim"

# Load local binaries
export PATH=$HOME/.local/bin:$PATH
export MANPATH=$HOME/.local/man:$MANPATH
if [[ -d "$HOME/.local/extras/coreutils" ]]; then
  export PATH=$HOME/.local/extras/coreutils/bin:$PATH
  export MANPATH=$HOME/.local/extras/coreutils/man:$MANPATH
fi

# Load homebrew (if available)
if [[ -d $HOME/.brew ]]; then
  export PATH="$HOME/.brew/bin:$HOME/.brew/sbin:$PATH"
fi

export LD_LIBRARY_PATH=$HOME/.ncurses/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=$HOME/.local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# Bat config
export BAT_CONFIG_PATH="$HOME/.config/bat/bat.conf"

# ls color scheme
export LS_COLORS="$(cat ~/.lscolors)"

# Login vs compute node rules
# Login nodes should automatically try and set up an ssh agent; compute nodes shouldn't.
if [[ -z $SLURM_JOB_ID ]]; then
    # Start/attach to existing ssh agent
    source sagent
fi

# Modules
if [[ -f /etc/profile.d/modules.sh ]]; then
    source /etc/profile.d/modules.sh
    # Slurm
    if [[ "$(module avail)" == *"slurm"* ]]; then
        module load slurm
    fi
fi

#####################
# Aliases
#####################

# Replace ls with lsd
if command_exists lsd ; then
    alias ls="lsd --group-directories-first --color=auto"
    alias lc="lsd --group-directories-first -lh --color=auto"
    alias la='lsd --group-directories-first -lah --color=auto'
    alias lm='lsd --group-directories-first -lah --sort modified --color=auto'
    alias ll='lsd --group-directories-first -lah --sort size --color=auto'
elif command_exists exa ; then
    alias ls="exa --color=auto"
    alias lc="exa -lh --color=auto"
    alias la='exa -lah -s name --color=auto'
    alias lm='exa -lah -s modified --color=auto'
    alias ll='exa -lah -s size --color=auto'
fi

# Add color and make human readable
alias df='df -h'
# Grep to have color, give line number, don't tell me it can't access restricted files (sudo), and don't process binary files (garbage output ):
alias grep='grep --color=always --line-number --no-messages --binary-files=without-match'
#?
alias prs='ps -o uid,user,pid,%cpu,%mem,tt,state,start,time,command'

# Who has processes?
alias whodat='ps haeo user | sort -u'

# IP address lookup
alias lip="hostname -I | cut -d' ' -f1"
alias gip="curl -s http://ipinfo.io/ip | cut -d'%' -f1"

# SSH-Agent (from scripts/)
alias sagent='source sagent'

#####################
# Functions
#####################

# Tmux
# One command to attach to an existing session, or create one if none exist.
mux () {
    tmux attach $@ || tmux
}

# NVIDIA driver shortcuts
if command_exists nvidia-smi ; then
  nv-arch () {
    nvidia-smi --query-gpu=name,memory.total,compute_cap --format=csv
  }

  nv-name () {
    full_name=$(nvidia-smi -i 0 --query-gpu=gpu_name --format=csv,noheader)
    name_tmp=${full_name//NVIDIA/}
    name_tmp=${name_tmp//Tesla/}
    name_tmp=${name_tmp//Ampere/}
    name_tmp=${name_tmp//GeForce/}
    name_tmp=${name_tmp//RTX/}
    name_tmp=${name_tmp// /}
    name_final=${name_tmp:0:8}
    echo $name_final
  }

  timeout 1s nvidia-smi --version 2>&1 >> /dev/null
  export HAS_NV_SMI=$([ "$?" -eq 0 ] && echo 1 || echo 0)
  if [[ $HAS_NV_SMI = 1 ]]; then
    export NV_NAME=$(nv-name)
  fi
fi

# Zathura (pdf viewer) shortcut, and without taking over the terminal
if command_exists zathura ; then
    zat () {
      zathura --page=1 "$@" > /dev/null 2>&1 &
    }
fi

# Clear out those latex compile files for goodness sake
cleartex () {
  if [[ $# -eq 1 ]]; then
      rm -f $1.log $1.aux $1.bbl $1.blg $1.out $1.dvi $1.ps $1.ps.gz \
          $1.synctex.gz $1.fls $1.fdb_latexmk $1.synctex\(busy\) \
          $1.bcf $1.run.xml
      rm -f texput.log
  else
      echo "No argument passed! cleartex expects exactly 1 argument: file name."
      echo "For example: cleartex main will remove latex cache files associated with main."
  fi
}

# Wait on PIDs
# Useful when lazily trying to schedule jobs on a physical node or workstation without a scheduler
anywait(){
    if [[ $# -eq 0 ]] || [[ $1 == "--help" ]]; then
        echo "Block on PIDs (anywait)"
        echo "usage: anywait [pid]"
        echo "       anywait [pid1] ... [pidN]"
        echo ""
        echo "Waits on all PIDs to finish / die with 10 second intervals."
    else
        # Borrowed this from StackOverflow:
        # https://stackoverflow.com/a/1127675
        for pid in "$@"; do
            while kill -0 "$pid"; do
                # echo "$pid is still alive, waiting..."
                sleep 10
            done
        done
    fi
}

# Rsync shortcut; with replacement
ry () {
    rsync -a -H -x -v --numeric-ids --delete --progress -e "ssh -T -o Compression=no -x" $1 $2
}

# Rsync shortcut; WITHOUT replacement
rys () {
    rsync -a -H -x -v --numeric-ids --ignore-existing --progress -e "ssh -T -o Compression=no -x" $1 $2
}

# Open Vifm, and chdir to where it's closed
vicd() {
    local dst="$(command vif --choose-dir - "$@")"
    if [ -z "$dst" ]; then
        echo 'Directory picking cancelled/failed'
        return 1
    fi
    cd "$dst"
}

# SMUX: SSH and then attach to tmux
smux () {
    ssh -t ${@} 'bash -c "tmux a || tmux"'
}

# Diff so fancy shortcut
diffs () {
    diff -u $1 $2 | diff-so-fancy | less
}

# Last slurm job id
lsjid() {
  echo $(sacct -X --format "jobid%50" | tail -n1 | xargs)
}

